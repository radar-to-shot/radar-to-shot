name: Run Robot Warriors Battles

on:
  push:
    branches: ["battle/**"]
    paths:
      - "robots/**"
      - "scripts/get_battles.py"
      - "scripts/render_battle_script.py"
      - "scripts/build_disk.py"
      - "images/Mac_IIci.ROM"
      - "images/Robot Warriors CI.dsk"
      - ".github/workflows/run-battle.yml"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: pip install --disable-pip-version-check --no-cache-dir machfs Jinja2 numpy pillow choix

      - name: Build .dsk (CI template + battle script)
        run: |
          mkdir -p build
          python scripts/get_battles.py \
            --robots-dir robots \
            --num-battles 10 \
            --out build/battles.json
          python scripts/render_battle_script.py \
            --battles-json build/battles.json \
            --template scripts/templates/battles_quick.template \
            --out build/battle_script.txt
          python scripts/build_disk.py \
            --template "images/Robot Warriors CI.dsk" \
            --robots-dir robots \
            --battle-script build/battle_script.txt \
            --out build/robot.dsk
          ls -lh build

      - name: Install BasiliskII + Xvfb
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb basilisk2

      - name: Build deark v1.7.0 from source
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl ca-certificates

          mkdir -p "$HOME/src" && cd "$HOME/src"
          curl -fL -o deark.tar.gz https://github.com/jsummers/deark/archive/refs/tags/v1.7.0.tar.gz
          tar xzf deark.tar.gz
          DEARK_DIR="$(tar tzf deark.tar.gz | head -1 | cut -d/ -f1)"
          cd "$DEARK_DIR"

          make -j"$(nproc)"
          sudo install -m 0755 deark /usr/local/bin/deark

          # sanity check
          deark -version

      - name: Run battle using headless Basilisk II
        working-directory: build
        timeout-minutes: 20
        run: |
          ROM="${GITHUB_WORKSPACE}/images/Mac_IIci.ROM"
          IMG="${PWD}/robot.dsk"

          if timeout 15m xvfb-run -a BasiliskII \
              --cpu 3 \
              --fpu true \
              --nogui true \
              --nosound true \
              --nocdrom true \
              --disk "${IMG}" \
              --rom "${ROM}"
          then
            echo "BasiliskII exited normally."
          else
            status=$?
            if [ "$status" -eq 124 ]; then
              echo "BasiliskII timed out"
              pkill -f BasiliskII || true
            else
              echo "BasiliskII exited with status ${status}"
              exit "${status}"
            fi
          fi

      - name: Extract battle results images
        shell: python
        run: |
          import os, sys
          from machfs import Volume

          img_path = os.path.join("build", "robot.dsk")
          out_dir = os.path.join("build", "results")

          v = Volume()
          with open(img_path, "rb") as f:
            v.read(f.read())

          rw = v["Desktop Folder"]["Robot Warriors"]

          os.makedirs(out_dir, exist_ok=True)

          for name in list(rw.keys()):
            obj = rw.get(name)
            if hasattr(obj, "keys"):
              continue

            base = name.rsplit(".", 1)[0]
            if base.lower().startswith("battle results"):
              out_path = os.path.join(out_dir, name)
              with open(out_path, "wb") as out:
                out.write(getattr(obj, "data", b""))
              print(f"Extracted: {out_path}")

      - name: Convert extracted PICTs to PNG and upload
        shell: bash
        run: |
          set -euo pipefail
          in_dir="build/results"
          out_dir="build/results_png"
          mkdir -p "$out_dir"

          found=0
          # Pick up anything starting with "Battle Results" (any extension or none)
          while IFS= read -r -d '' f; do
            bn="$(basename "$f")"
            base="${bn%.*}"   # drop extension if present
            deark -q -m pict "$f" -o "$out_dir/${base}"
            echo "Converted: $bn -> ${base}"
            found=$((found+1))
          done < <(find "$in_dir" -maxdepth 1 -type f -iname 'Battle Results*' -print0)

          if [[ $found -eq 0 ]]; then
            echo "No matching 'Battle Results*' files to convert in $in_dir"
            exit 1
          fi

      - name: OCR results PNGs to JSON
        run: |
          python scripts/ocr_results.py \
            build/results_png \
            --battles-json build/battles.json \
            --output build/results.json
          ls -lh build/results.json

      - name: Compute rankings
        run: |
          python scripts/generate_results.py \
            --in build/results.json \
            --out build/rankings.json
          ls -lh build/rankings.json

      - name: Upload OCR + rankings JSON
        uses: actions/upload-artifact@v4
        with:
          name: results-and-rankings-${{ github.sha }}
          path: |
            build/results.json
            build/rankings.json
          if-no-files-found: error
          retention-days: 14

      - name: Append rankings table to job summary
        shell: python
        run: |
          import json, os, math
          rk = json.load(open("build/rankings.json","r",encoding="utf-8"))
          robots = rk.get("robots", [])
          lines = []
          lines.append("### Rankings (Elo-style)\n")
          if not robots:
            lines.append("> No robots found.\n")
          else:
            lines.append("| # | Robot | Rating | W–L–D | Games |")
            lines.append("|---:|---|---:|:---:|---:|")
            for i, p in enumerate(robots, start=1):
              name = p.get("name","?")
              rating = p.get("rating", float("nan"))
              wins = int(p.get("wins",0))
              losses = int(p.get("losses",0))
              draws = int(p.get("draws",0))
              games = int(p.get("games", wins+losses+draws))
              rtxt = f"{rating:.2f}" if isinstance(rating,(int,float)) and math.isfinite(rating) else "—"
              lines.append(f"| {i} | {name} | {rtxt} | {wins}–{losses}–{draws} | {games} |")
          with open(os.environ["GITHUB_STEP_SUMMARY"], "a", encoding="utf-8") as f:
            f.write("\n".join(lines) + "\n")

      - name: Upload disk image artifact
        uses: actions/upload-artifact@v4
        with:
          name: robot-dsk-${{ github.sha }}
          path: build/robot.dsk
          if-no-files-found: error
          retention-days: 14

      - name: Upload battle results image
        uses: actions/upload-artifact@v4
        with:
          name: battle-results-${{ github.sha }}
          path: build/results_png
          if-no-files-found: error
          retention-days: 14

      - name: Summary
        shell: bash
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" <<'MARKDOWN'
          ### Battle run complete

          **Artifacts**
          - Disk image: **robot-dsk-${{ github.sha }}**
          - Results images: **battle-results-${{ github.sha }}**
          MARKDOWN

